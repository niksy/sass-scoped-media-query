@use 'true' as *;
@use '../index' as *;

@include test-module('Single query') {
	@include test('"screen and (min-width: 500px)", without selector') {
		@include assert() {
			@include output() {
				@include scoped-media-query(('screen and (min-width: 500px)')) {
					color: #f00;
				}
			}

			@include expect() {
				@media screen and (min-width: 500px) {
					color: #f00;
				}
			}
		}
	}

	@include test('"screen and (min-width: 500px)", with selector ".jasper"') {
		@include assert() {
			@include output() {
				@include scoped-media-query(('screen and (min-width: 500px)')) {
					.jasper {
						color: #f00;
					}
				}
			}

			@include expect() {
				@media screen and (min-width: 500px) {
					.jasper {
						color: #f00;
					}
				}
			}
		}
	}

	@include test(
		'"screen and (min-width: 500px)", with selector ".jasper" and parent selector ".gizmo"'
	) {
		@include assert() {
			@include output($selector: false) {
				@include scoped-media-query(
					('screen and (min-width: 500px)', '.gizmo')
				) {
					.jasper {
						color: #f00;
					}
				}
			}

			@include expect($selector: false) {
				@media screen and (min-width: 500px) {
					.gizmo {
						.jasper {
							color: #f00;
						}
					}
				}
			}
		}
	}

	@include test(
		'"screen and (min-width: 500px)", with selector ".jasper", parent selector ".gizmo" and complex nesting'
	) {
		@include assert() {
			@include output($selector: false) {
				@include scoped-media-query(
					('screen and (min-width: 500px)', '.gizmo')
				) {
					.jasper {
						.gizmo {
							color: #f00;
						}

						&-gizmo {
							color: #ff0;
						}
					}
				}
			}

			@include expect($selector: false) {
				@media screen and (min-width: 500px) {
					.gizmo {
						.jasper {
							.gizmo {
								color: #f00;
							}

							&-gizmo {
								color: #ff0;
							}
						}
					}
				}
			}
		}
	}
}
